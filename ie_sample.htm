<!DOCTYPE html>
<html>
<head>
  <title>WebRTCAPI</title>
	<script src="socket.io.min.js"></script>
  <script src="jquery-1.11.1.min.js"></script>
	<script src="rtcplugin.js"></script>
</head>
<body>
	<br>
	<button onclick="debug()">debug</button>
    <!-- data:image/png;base64, -->
    <button onclick="selfie()">selfie</button>
	<br>
  <script type="text/javascript">

	var myrtcid
	  , rtcPlugin
    , rtcPlugin2
	  ,	iceServers
	  , socket
	  , element
    , element2
    , element3
	  , setupCallbacks;

	if (!Object.keys) {
		Object.keys = function(obj) {
			var keys = [];
			for (var p in obj) {
				if (obj.hasOwnProperty(p))
					keys.push(p);
			}
			return keys;
		}
	}

	if (!Array.prototype.forEach) {
	    Array.prototype.forEach = function (func, thisarg) {
        var self = thisarg || this;
        var i = 0
        for (i = 0; i < self.length; i++) {
            func(self[i]);
        }
	    }
	}

	$(document).ready(function(){

    element = document.getElementById("videoElement1");
    element2 = document.getElementById("videoElement2");
    element3 = document.getElementById("videoElement3");

	    //socket = io.connect('dev.easyrtc.com');
		socket = io.connect('192.168.1.16:8080');

		var auth = {
		    "msgType": "authenticate",
			"msgData" : {
			    "apiVersion": "1.0.10",
			    "applicationName": "easyrtc.audioVideo"
			} 
		};


		setupCallbacks = function () {
		    socket.emit('easyrtcAuth', auth, function (message) {

			    rtcPlugin.onicecandidate = function (candidate) {
			    	
			    	// dlog("native --> onicecandidate");

			    	socket.emit ("easyrtcCmd", {
              msgType: "candidate",
              senderEasyrtcid: myrtcid,
              targetEasyrtcid: rtcPlugin.remoteId,
              msgData: {
                type: "candidate",
                label: candidate.sdpMLineIndex,
                id: candidate.sdpMid,
                candidate: candidate.candidate
              }
            }, function (){
              // there must be a callback for this emit to work.
            });
			    };

				/* Handle displaying the button to connect to other peers... */

			  myrtcid = message.msgData.easyrtcid;
			  rtcPlugin.setupRenderSurface("local"); // HACK: plz do this better

  	    document.getElementById("myid").innerHTML = "My id is: " + myrtcid;
				addPeerButtons(message);
				
				iceServers = message.msgData.iceConfig.iceServers;
				rtcPlugin.handleIceServers(message.msgData.iceConfig.iceServers);

				socket.on('easyrtcCmd', function (json) {

				    dlog("socket.on(easyrtcCmd) --> "+ JSON.stringify(json));

				    var msgType = json.msgType || json.msgData.type;

				    if (msgType) {
				      // cleanup sdp
              if (json.msgData && json.msgData.sdp) {
                var sdp = json.msgData.sdp;
                var actualnewlines = String.fromCharCode(13) + String.fromCharCode(10);
                sdp = sdp.replace(/\\r\\n/g, actualnewlines);
                sdp = sdp.replace(/\"/g, '');

                json.msgData.sdp = sdp;
                dlog("----------");
                dlog(json.msgData.sdp);
                dlog("----------");
              }	

						// don't need, could just check for sdp...
						switch(msgType) {
					
						case 'answer':
						
						    dlog('got answer');
						    rtcPlugin.setupRenderSurface(json.senderEasyrtcid); // HACK: do this better...

						    rtcPlugin.handleAnswer(json.senderEasyrtcid, json.msgData.sdp);
							break;
						
						case 'candidate': 
								
							dlog('socket --> candidate');

							var cand = {
								candidate : json.msgData.candidate, 
								sdpMid : json.msgData.id, 
								sdpMLineIndex : json.msgData.label
							};

							rtcPlugin.handleCandidate(json.senderEasyrtcid, cand);

							break;

						case 'roomData': 

							handleRoomData(json.msgData.roomData);
							break;

						case 'offer': 
							dlog('got offer');

							rtcPlugin.setupRenderSurface(json.senderEasyrtcid); // HACK: do this better...

							rtcPlugin.handleOffer(json.senderEasyrtcid, json.msgData, function(sdp){
								dlog('returning answer');
								dlog(sdp);
								socket.emit('easyrtcCmd', { 
									msgType : "answer",
									targetEasyrtcid : json.senderEasyrtcid,
									msgData : { sdp : sdp, type : "answer" }
								}, function() {
									dlog("answered");
								});
							});

							break;
						

						case 'hangup':
                            dlog("sent HANGUP:" + JSON.stringify(json));
                            debugger;
                            rtcPlugin.hangUp();
							break;

						default:
						
							alert('unexpected message from easyrtc server ' + JSON.stringify(json));
							break;
						
						}
					}
				});
			});
		};
	});

	function addPeerButtons(message){
		var rtcids = Object.keys(message.msgData.roomData["default"].clientList);

		var htm = '';
		for(var i = 0; i < rtcids.length; i++) {
			var n = rtcids[i];
			if (n !== myrtcid)
                htm += "<div>"
			htm += '<button id="' + n + '" onclick="offer(\'' + n + '\')">' + n + '</button>';
			htm += '<button onclick="hangup("' + n + '")">hangup</button>'
                htm += "</div>"
		}
		document.getElementById('divPeers').innerHTML = htm;
	}

	function handleRoomData(roomData) {
		var htm = '';
		if (roomData["default"].clientListDelta.updateClient) {
			var keys = Object.keys(roomData["default"].clientListDelta.updateClient);
			htm = '<button id="' + keys[0] + '" onclick="offer(\'' + keys[0] + '\')">' + keys[0] + '</button>';
			document.getElementById('divPeers').innerHTML += htm;
		}
		else {
			var keys = Object.keys(roomData["default"].clientListDelta.removeClient);
			document.getElementById(keys[0]).style.display = 'none';
			keys.forEach(function (key) { rtcPlugin.hangUp(key); });
		}
	}

	// recursive function to dump an object to the debug div; pass in '' as sp
	function dump(obj, sp) {
		for (var property in obj) {
			if (typeof obj[property] === 'object') {
				dlog(sp + property + ': ');
				sp += '\t';
				dump(obj[property], sp);
			}
			else
				dlog(sp + property + ': ' + obj[property]);
		}
	}

	function authenticate() {
		setupCallbacks();
	}

	function hangup(easyRtcId) {
	    rtcPlugin.hangUp(easyRtcId);
		socket.emit('easyrtcCmd', { "msgType" : "hangup", "targetEasyrtcid" : easyRtcId } , function() { 
			dlog('hangup('+easyRtcId+')');
		});
		document.getElementById(rtcPlugin.remoteId).disabled = false; 
	}

	function debug() {
		rtcPlugin.nativeDebug();
	}

	function offer(remoteId) {
		// create the offer 
		rtcPlugin.createOffer(remoteId, function (sdp) {
			// send it off over signaling
			socket.emit('easyrtcCmd', { 
				msgType : "offer",
				targetEasyrtcid : remoteId,
				msgData : { sdp : sdp, type : "offer" }
			}, function offerCallbackComplete (param) {
				dlog('offerCallback()' + param);
				document.getElementById(remoteId).disabled = true;
			});
		});
		 
	}

	function selfie() {
	    rtcPlugin.getSelfie(function (data) {
	        var canvii = $('.selfieCanvas');
	        var img = new Image();
	        img.onload = function () {
	            var self = this;
	            $.each(canvii, function (index, canvas) {
	                canvas.getContext("2d").drawImage(self, 0, 0, canvas.width, canvas.height);
	            });
	        }
	        var imagedata = data;
	        img.src = imagedata;
	        
	    }, function (fail) {
	        dlog("failed to take selfie.");
	    });
	}

	function run() {

	  element = document.getElementById("videoElement1");
	  
	  element.width = 0;
	  element.height = 0;

	  var renderSurfaces = $(".renderSurface");
		rtcPlugin = new RTCPlugin(element, renderSurfaces, function win() {

		    setTimeout(function () {
		        setupCallbacks();
		    }, 100);

		}, function fail() {
		    alert("Could not start plugin.");
		});


    }

	function dlog(text) {
		document.getElementById('divLog').innerHTML += text + '<br>';
	}

	function readyStateChange() {
	    if (videoElement1.readyState === 4) {
	        run();
	    }
	}
</script>

<style>
    .videoOverlay {
        position: absolute;
        background: 3px solid white;
        width: 100%;
        height: 100%;
        z-index: 0;
    }

    .videoElement {
        position: relative;
        z-index:1;
    }

    .videoContainer {
        position:relative;
        width:400px;
        height:300px;
        z-index:0;
    }
     
    .controls{
        position:absolute;
        left:200px;
        top:200px;
        z-index:1;
        background: none transparent;
    }

    .selfieCanvas {
        width:200px;
        height:150px;
    }

    .renderSurface {
       
    }
  </style>
  <div style="clear:both;"> </div>
	<div id='divMe'></div>
	<div id='divPeers'></div>
	<div id='divATL'></div>
	<div id='divSDP'></div>
    <div id='myid'></div>
    <div style="border : 2px solid red;">
        <p>Selfie:</p>
        <canvas id="selfieCanvas" class="selfieCanvas">
        </canvas>   
        <canvas id="c1" class="renderSurface" width="640" height="480"></canvas>  
        <canvas id="c2" class="renderSurface" width="640" height="480"></canvas>
        <canvas id="c3" class="renderSurface" width="640" height="480"></canvas>
        <canvas id="c4" class="renderSurface" width="640" height="480"></canvas>
    </div>
	<pre>
		<div id='divLog'> </div>
	</pre>
    <div id="container1" class="videoContainer" style="left:0px; position:absolute; height:0px; width:0px;">
        <object id="videoElement1" class="videoElement"
                onreadystatechange="readyStateChange()"
                classid="CLSID:0E8D29CE-D2D0-459A-8009-3B34EFBC43F0"
                height="2" width="100">
        </object>
    </div> 
</body>
</html>
